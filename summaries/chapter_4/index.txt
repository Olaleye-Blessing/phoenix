Route the Live Views

checking pento/lib/pento_web/router.ex:

live "/products", ProductLive.Index, :index
live "/products/new", ProductLive.Index, :new
live "/products/:id/edit", ProductLive.Index, :edit
live "/products/:id", ProductLive.Show, :show
live "/products/:id/show/edit", ProductLive.Show, :edit

the live/4 macro function is made available by: use PentoWeb, :router

the 4th argument to live/4 is the live action

Understand LiveView Behaviours
mount/3 -- set up data in client
render/1 -- return data to client
handle_* -- functions to change socket
terminate/2 -- to shut down live view --- optional

If render/1 function is not explicitly defined, LiveView will render a template based on the name of the live view file. the template will be in the form name_of_live_view_file.html.heex

the handle_params/3 is called(if implemented) right after mount/3 to access and use the live action from socket assigns
===================================================================

Live Navigation with live_patch/2

<span><%= live_patch "Edit", to: Routes.product_index_path(@socket, :edit, product) %></span>
the live_patch/2 won't reload the page but will change the url in the browser bar and will kick off LiveView's change management workflow. The mount function won't be called this time around but handle_params/3 and render/2 will be called
========================================================================

Handle Modal Component Events
there are 2 kinds of components

live component -- uses the LiveComponent behavior, is rendered with an id attribute, and can implement event handlers to handle events.

function component -- is any function that receives an assigns map as argument and returns a rendered HEEx template.

A live component must receive the :id assigns as an argument because LiveView uses this ID to uniquely identify the component.

event management in LiveView.

First, add a LiveView DOM Element binding, or LiveView binding, to a given HTML element. LiveView supports a number of such bindings that send events over the WebSocket to the live view when a specified client interaction, like a button click or form submit, occurs.

Then, specify a target for that LiveView event by adding a phx-target attribute to the DOM element we’ve bound the event to. This instructs LiveView where
to send the event—to the parent LiveView, the current component, or to another component entirely.

Lastly, implement a handle_event/3 callback that matches the name of the event in the targeted live view or component.
====================================================================================

Form component events

The main function in the template is the form/1 function. This function renders the form function component made available by LiveView under the hood. The form function component returns a rendered HEEx template containing an HTML form built with the help of Phoenix.HTML.Form.form_for/4.

<.form
    let={f}
    for={@changeset}
    id="product-form"
    phx-target={@myself}
    phx-change="validate"
    phx-submit="save"
>
    children
</.form>

phx-change -- send the "validate" event to the live component each time the form changes
phx-submit -- send the "save" event to the live component when the user submits the form
phx-target -- specify a component to receive these events. Specify @myself to send events to the current component

The usage of the phx-change binding presents an added bonus–if the user reconnects to the live view, or the live view remounts after a crash, the client will fire the phx-change event with whatever values are present in the form fields. This means the state of the form will automatically recover in the event of a reconnect.
======================================================================================================

Live Navigation with push_redirect
When the client receives this socket data, it will redirect to a live view, and will always trigger the mount/3 function. It’s also the only mechanism you can use to redirect to a different LiveView than the current one.

push_redirect triggers mount/3